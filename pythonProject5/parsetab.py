
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSleftTERNARYEQUALITY NAME NUMBER TERNARYstatement : NAME "=" expressionstatement : expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression EQUALITY expression\n  expression : expression \'?\' expression TERNARY expression\n\n  expression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : NUMBERexpression : NAME'
    
_lr_action_items = {'NAME':([0,4,5,7,8,9,10,11,12,13,25,],[2,15,15,15,15,15,15,15,15,15,15,]),'-':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,],[4,-12,9,4,4,-11,4,4,4,4,4,4,4,-9,-12,9,9,-3,-4,-5,-6,9,9,-10,4,-8,]),'(':([0,4,5,7,8,9,10,11,12,13,25,],[5,5,5,5,5,5,5,5,5,5,5,]),'NUMBER':([0,4,5,7,8,9,10,11,12,13,25,],[6,6,6,6,6,6,6,6,6,6,6,]),'$end':([1,2,3,6,14,15,17,18,19,20,21,22,24,26,],[0,-12,-2,-11,-9,-12,-1,-3,-4,-5,-6,-7,-10,-8,]),'=':([2,],[7,]),'+':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,26,],[-12,8,-11,-9,-12,8,8,-3,-4,-5,-6,8,8,-10,-8,]),'*':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,26,],[-12,10,-11,-9,-12,10,10,10,10,-5,-6,10,10,-10,-8,]),'/':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,26,],[-12,11,-11,-9,-12,11,11,11,11,-5,-6,11,11,-10,-8,]),'EQUALITY':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,26,],[-12,12,-11,-9,-12,12,12,-3,-4,-5,-6,12,12,-10,-8,]),'?':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,26,],[-12,13,-11,-9,-12,13,13,-3,-4,-5,-6,13,13,-10,-8,]),')':([6,14,15,16,18,19,20,21,22,24,26,],[-11,-9,-12,24,-3,-4,-5,-6,-7,-10,-8,]),'TERNARY':([6,14,15,18,19,20,21,22,23,24,26,],[-11,-9,-12,-3,-4,-5,-6,-7,25,-10,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,5,7,8,9,10,11,12,13,25,],[3,14,16,17,18,19,20,21,22,23,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','main.py',72),
  ('statement -> expression','statement',1,'p_statement_expr','main.py',77),
  ('expression -> expression + expression','expression',3,'p_expression_binop','main.py',82),
  ('expression -> expression - expression','expression',3,'p_expression_binop','main.py',83),
  ('expression -> expression * expression','expression',3,'p_expression_binop','main.py',84),
  ('expression -> expression / expression','expression',3,'p_expression_binop','main.py',85),
  ('expression -> expression EQUALITY expression','expression',3,'p_expression_binop','main.py',86),
  ('expression -> expression ? expression TERNARY expression','expression',5,'p_expression_terop','main.py',105),
  ('expression -> - expression','expression',2,'p_expression_uminus','main.py',116),
  ('expression -> ( expression )','expression',3,'p_expression_group','main.py',121),
  ('expression -> NUMBER','expression',1,'p_expression_number','main.py',126),
  ('expression -> NAME','expression',1,'p_expression_name','main.py',131),
]
